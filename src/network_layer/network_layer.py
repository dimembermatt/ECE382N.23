
class NetworkDevice:
    
    def __init__(self):
        pass

class NetworkTransceiver:

    """
    This class exposes the messages that are sent or received between processes on the device.
    """

    def __init__(self, device):
        self.device = device

    def send(self, message, ):
        """
        This method sends a message to another device
        """
        self.device.send(message)

    def receive(self):
        """
        This method receives a message from the network layer.
        """
        return self.device.receive()


class NetworkMessage:

    """
    This class consists of messages generated by the application layer. 

    These messages are given attributes like packet length, communication 
    type, and other attributes of the communication stack necessary for transmission.
    """

    def __init__(self, message_type, message_length, message_payload, src_device, dst_device):
        if type(message_payload) is not bytearray:
            raise TypeError("message_payload must be a bytearray")

        if type(message_length) is not int or message_length < 0:
            raise TypeError("message_length must be a positive integer")

        if type(message_type) is not str:
            raise TypeError("message_type must be a string")

        if message_length > len(message_payload):
            raise ValueError("message_length cannot be larger than the payload")

        if type(src_device) is not NetworkDevice:
            raise TypeError("src_device must be a NetworkDevice")

        if type(dst_device) is not NetworkDevice:
            raise TypeError("dst_device must be a NetworkDevice")

        if src_device == dst_device:
            raise ValueError("src_device and dst_device cannot be the same")

        self.message_type = message_type
        self.message_length = message_length
        self.message_payload = message_payload[0:message_length]
    
    def __str__(self):
        rv = ""

        rv += "Message Type: " + self.message_type + "\n"
        rv += "Message Length: " + str(self.message_length) + "\n"
        rv += "Message Payload: " + str(self.message_payload) + "\n"

        return rv
